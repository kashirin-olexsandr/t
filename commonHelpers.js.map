{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '45384673-88f77579824a7b83d33085da5';\nconst BASE_URL = 'https://pixabay.com/api/';\n\n// Функция для выполнения HTTP-запроса\nexport async function fetchImages(query, page = 1) {\n    try {\n        const response = await axios.get(BASE_URL, {\n            params: {\n                key: API_KEY,\n                q: query,\n                image_type: 'photo',\n                orientation: 'horizontal',\n                safesearch: true,\n                per_page: 15,\n                page: page\n            }\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response ? error.response.data.message : error.message);\n    }\n}","// Функция для очистки галереи\nexport function clearGallery(galleryElement) {\n    galleryElement.innerHTML = '';\n}\n\n// Функция для отображения изображений в галерее\nexport function renderImages(images, galleryElement) {\n\n    // Создание разметки для каждого изображения\n    const markup = images.map(({ \n        webformatURL, \n        largeImageURL, \n        tags, \n        likes, \n        views, \n        comments, \n        downloads \n    }) => {\n        return `\n            <li class=\"gallery-list-item\">\n                <a class=\"gallery-link\" href=\"${largeImageURL}\">\n                    <img class=\"gallery-img\" src=\"${webformatURL}\" \n                        alt=\"${tags}\" \n                        title=\"${tags}\" />\n                    <ul class=\"sub-list\">\n                        <li class=\"sub-list-item\">\n                            <b>Likes</b>\n                            <p>${likes}</p>\n                        </li>\n                        <li class=\"sub-list-item\">\n                            <b>Views</b>\n                            <p>${views}</p>\n                        </li>\n                        <li class=\"sub-list-item\">\n                            <b>Comments</b>\n                            <p>${comments}</p>\n                        </li>\n                        <li class=\"sub-list-item\">\n                            <b>Downloads</b>\n                            <p>${downloads}</p>\n                        </li>\n                    </ul>\n                </a>\n            </li>`;\n    }).join('');\n\n    // Добавление разметки в галерею\n    galleryElement.insertAdjacentHTML('beforeend', markup);\n}","import { fetchImages } from \"./js/pixabay-api.js\";\nimport { clearGallery, renderImages } from \"./js/render-functions.js\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\n// Получаем элементы из DOM\nconst searchForm = document.querySelector('#search-form');\nconst gallery = document.querySelector('.gallery');\nconst loader = document.querySelector('.loader');\nconst loadMoreBtn = document.querySelector('.load-more-btn');\n\nlet currentQuery = '';\nlet currentPage = 1;\nlet totalHits = 0;\n\n// Инициализация SimpleLightbox для отображения изображений\nlet lightbox = new SimpleLightbox('.gallery a', {});\n\n// Обработчик события отправки формы\nsearchForm.addEventListener('submit', async (event) => {\n    event.preventDefault();\n    currentQuery = event.currentTarget.elements.query.value.trim();\n\n    // Проверка или поле ввода не пустое\n    if (currentQuery === '') {\n        iziToast.error({ message: 'Please enter a search term.' });\n        return;\n    }\n\n    // Сброс номера страницы и очистка галереи для нового поиска\n    currentPage = 1;\n    clearGallery(gallery);\n    loadMoreBtn.style.display = 'none';\n\n    // Загрузка изображений (передаем false, чтобы не выполнять прокрутку)\n    await loadImages(false);\n});\n\n// Обработчик клика по кнопке \"Load more\"\nloadMoreBtn.addEventListener('click', async () => {\n    // Загрузка дополнительных изображений\n    await loadImages(true);\n});\n\n// Функция для загрузки изображений\nasync function loadImages(scrollPage = true) {\n    // Показать индикатор загрузки и скрыть кнопку \"Load more\"\n    loader.style.display = 'block';\n    loadMoreBtn.style.display = 'none';\n\n    try {\n        // Выполнение запроса к API Pixabay\n        const data = await fetchImages(currentQuery, currentPage);\n\n        // Проверка или есть результаты\n        if (data.hits.length === 0 && currentPage === 1) {\n            iziToast.info({ message: 'Sorry, there are no images matching your search query. Please try again!' });\n        } else {\n            // Отображение изображений и обновление галереи\n            renderImages(data.hits, gallery);\n            lightbox.refresh();\n            currentPage++;\n            totalHits = data.totalHits;\n\n            // Проверка или достигнут конец коллекции\n            if (gallery.children.length >= totalHits) {\n                loadMoreBtn.style.display = 'none';\n                iziToast.info({ message: \"We're sorry, but you've reached the end of search results.\" });\n            } else {\n                loadMoreBtn.style.display = 'block';\n            }\n\n            // Плавная прокрутка страницы\n            if (scrollPage) {\n                const cardHeight = gallery.firstElementChild.getBoundingClientRect().height;\n                window.scrollBy({\n                    top: cardHeight * 2,\n                    behavior: 'smooth',\n                });\n            }\n        }\n    } catch (error) {\n        iziToast.error({ message: error.message });\n    } finally {\n        // Скрыть индикатор загрузки\n        loader.style.display = 'none';\n    }\n}"],"names":["API_KEY","BASE_URL","fetchImages","query","page","axios","error","clearGallery","galleryElement","renderImages","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","searchForm","gallery","loader","loadMoreBtn","currentQuery","currentPage","totalHits","lightbox","SimpleLightbox","event","iziToast","loadImages","scrollPage","data","cardHeight"],"mappings":"owBAEA,MAAMA,EAAU,qCACVC,EAAW,2BAGV,eAAeC,EAAYC,EAAOC,EAAO,EAAG,CAC/C,GAAI,CAYA,OAXiB,MAAMC,EAAM,IAAIJ,EAAU,CACvC,OAAQ,CACJ,IAAKD,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,GACZ,SAAU,GACV,KAAMC,CACT,CACb,CAAS,GACe,IACnB,OAAQE,EAAO,CACZ,MAAM,IAAI,MAAMA,EAAM,SAAWA,EAAM,SAAS,KAAK,QAAUA,EAAM,OAAO,CAC/E,CACL,CCtBO,SAASC,EAAaC,EAAgB,CACzCA,EAAe,UAAY,EAC/B,CAGO,SAASC,EAAaC,EAAQF,EAAgB,CAGjD,MAAMG,EAASD,EAAO,IAAI,CAAC,CACvB,aAAAE,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IACe;AAAA;AAAA,gDAEiCL,CAAa;AAAA,oDACTD,CAAY;AAAA,+BACjCE,CAAI;AAAA,iCACFA,CAAI;AAAA;AAAA;AAAA;AAAA,iCAIJC,CAAK;AAAA;AAAA;AAAA;AAAA,iCAILC,CAAK;AAAA;AAAA;AAAA;AAAA,iCAILC,CAAQ;AAAA;AAAA;AAAA;AAAA,iCAIRC,CAAS;AAAA;AAAA;AAAA;AAAA,kBAKrC,EAAE,KAAK,EAAE,EAGVV,EAAe,mBAAmB,YAAaG,CAAM,CACzD,CCtCA,MAAMQ,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAU,SAAS,cAAc,UAAU,EAC3CC,EAAS,SAAS,cAAc,SAAS,EACzCC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAe,GACfC,EAAc,EACdC,EAAY,EAGZC,EAAW,IAAIC,EAAe,aAAc,CAAE,CAAA,EAGlDR,EAAW,iBAAiB,SAAU,MAAOS,GAAU,CAKnD,GAJAA,EAAM,eAAc,EACpBL,EAAeK,EAAM,cAAc,SAAS,MAAM,MAAM,OAGpDL,IAAiB,GAAI,CACrBM,EAAS,MAAM,CAAE,QAAS,6BAA+B,CAAA,EACzD,MACH,CAGDL,EAAc,EACdjB,EAAaa,CAAO,EACpBE,EAAY,MAAM,QAAU,OAG5B,MAAMQ,EAAW,EAAK,CAC1B,CAAC,EAGDR,EAAY,iBAAiB,QAAS,SAAY,CAE9C,MAAMQ,EAAW,EAAI,CACzB,CAAC,EAGD,eAAeA,EAAWC,EAAa,GAAM,CAEzCV,EAAO,MAAM,QAAU,QACvBC,EAAY,MAAM,QAAU,OAE5B,GAAI,CAEA,MAAMU,EAAO,MAAM9B,EAAYqB,EAAcC,CAAW,EAGxD,GAAIQ,EAAK,KAAK,SAAW,GAAKR,IAAgB,EAC1CK,EAAS,KAAK,CAAE,QAAS,0EAA4E,CAAA,UAGrGpB,EAAauB,EAAK,KAAMZ,CAAO,EAC/BM,EAAS,QAAO,EAChBF,IACAC,EAAYO,EAAK,UAGbZ,EAAQ,SAAS,QAAUK,GAC3BH,EAAY,MAAM,QAAU,OAC5BO,EAAS,KAAK,CAAE,QAAS,4DAA8D,CAAA,GAEvFP,EAAY,MAAM,QAAU,QAI5BS,EAAY,CACZ,MAAME,EAAab,EAAQ,kBAAkB,sBAAqB,EAAG,OACrE,OAAO,SAAS,CACZ,IAAKa,EAAa,EAClB,SAAU,QAC9B,CAAiB,CACJ,CAER,OAAQ3B,EAAO,CACZuB,EAAS,MAAM,CAAE,QAASvB,EAAM,OAAS,CAAA,CACjD,QAAc,CAENe,EAAO,MAAM,QAAU,MAC1B,CACL"}